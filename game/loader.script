local eva = require("eva.eva")
local app = require("eva.app")
local druid = require("druid.druid")
local evaconst = require("eva.const")
local sitelock = require("eva.libs.sitelock")

local const = require("game.const")
local druid_style = require("game.settings.druid_style")
local window_settings = require("game.settings.window_settings")

local layout = require("druid.extended.layout")

local Profile = require("game.profile.Profile")
local Platform = require("game.profile.Platform")
local Analytics = require("game.analytics.Analytics")
local Server = require("game.server.Server")

sitelock.add_domain("insality.com")

---@class scene.loader

---@param self scene.loader
local function setup_druid(self)
	druid.set_default_style(druid_style)
	druid.set_sound_function(eva.sound.play)
	druid.set_text_function(eva.lang.txp)

	eva.events.subscribe(evaconst.EVENT.WINDOW_EVENT, function(params)
		druid.on_window_callback(params.event, params.data)
	end)

	druid.register("layout", layout)

	eva.events.subscribe(evaconst.EVENT.LANG_UPDATE, druid.on_language_change)
end


---@param self scene.loader
local function setup_sys(self)
	msg.post("@render:", "clear_color", {
		color = vmath.vector4(
			sys.get_config("render.clear_color_red"),
			sys.get_config("render.clear_color_green"),
			sys.get_config("render.clear_color_blue"),
			sys.get_config("render.clear_color_alpha")
		)})

	if html5 then
		html5.run("prevInnerWidth = -1")
		html5.run("resize_game_canvas()")
	end
end


local function setup_music_controller(self)
	local current_scene = nil

	local play_current_scene_music = function()
		if current_scene == const.WINDOW.SCENE_MENU then
			eva.sound.fade_music(0, 1, function()
				eva.sound.play_music(const.SOUND.MUSIC_MENU)
				eva.sound.fade_music(1, 1)
			end)
		end

		if current_scene == const.WINDOW.SCENE_GAME then
			eva.sound.fade_music(0, 0.5, function()
				timer.delay(1, false, function()
					eva.sound.play_music(const.SOUND.MUSIC_GAME, 0)
					eva.sound.fade_music(1, 3)
				end)
			end)
		end
	end

	eva.events.subscribe(evaconst.EVENT.SCENE_SHOW, function(params)
		local scene = params.scene_id
		if current_scene ~= scene then
			current_scene = scene
			play_current_scene_music()
		end
	end)

	eva.events.subscribe(evaconst.EVENT.MUSIC_GAIN_CHANGE, function(gain)
		if gain == 0 then
			eva.sound.stop_all()
		else
			play_current_scene_music()
		end
	end)
end


local function connect_to_server(self)
	eva.server.connect(function(session)
		if session then
			app.profile:set_user_id(session.user_id)
			--app.server.requester:load_user_code()
			--app.server.requester:set_status(const.STATUS.MENU)
		end
	end)
end


local function check_sitelock(self)
	if html5 and not eva.game.is_debug() then
		if not sitelock.verify_domain() then
			return false
		end
	end
	return true
end


---@param self scene.loader
function init(self)
	local original_config = sys.get_config("eva.settings")
	eva.init(original_config, {
		window_settings = window_settings
	})

	setup_druid(self)
	setup_sys(self)
	setup_music_controller(self)

	app.profile = Profile()
	app.platform = Platform()
	app.analytics = Analytics()
	app.server = Server()

	msg.post(".", const.MSG.START_LOADING)
	msg.post(".", "acquire_input_focus")
end


---@param self scene.loader
function update(self, dt)
	eva.update(dt)
end


---@param self scene.loader
function on_message(self, message_id, message, sender)
	if message_id == const.MSG.START_LOADING then
		if not check_sitelock(self) then
			-- local is_first_launch = eva.game.is_first_launch()
			---@type window.info_data
			local data = {}
			data.text = eva.lang.txt("ui_sitelock_info")
			eva.window.show(const.WINDOW.WINDOW_INFO, data)
			return
		end

		app.platform:login(function()
			connect_to_server(self)
			msg.post(".", "start_game")
		end)
	end

	if message_id == const.MSG.START_GAME then
		eva.window.show_scene(const.WINDOW.SCENE_MENU)
	end
end


---@param self scene.loader
function on_input(self, action_id, action)
	return eva.input.on_input(action_id, action)
end
