local eva = require("eva.eva")
local eva_const = require("eva.const")
local druid = require("druid.druid")
local druid_const = require("druid.const")
local app = require("eva.app")

local const = require("game.const")

local WINDOW_ID = const.WINDOW.WINDOW_ADMIN
local BUTTONS_PER_LINE = 3

local PAGES = {
	MAIN = "main",
	DEBUG = "debug",
	NOTIFICATIONS = "notifications",
	SPECIAL_ACTIONS = "special_actions",
	ITEMS = "items",
	SAVE = "save",
	WINDOWS = "windows",
	EVA = "eva",
}

local COLORS = {
	RED = "button_red",
	BLUE = "button_blue",
	GREY = "button_grey",
	YELLOW = "button_yellow",
	GREEN = "button_green",
	PURPLE = "button_purple",
	EMPTY = "button_empty",
}

local PAGES_FUNC = {}


---@param self window.admin
---@param callback func
local function close_window(self, callback)
	eva.window.disappear(WINDOW_ID)
end


---@param self window.admin
local function clear_content(self)
	for index = 1, #self._components do
		self.druid:remove(self._components[index])
	end
	self._components = {}
	for index = 1, #self._nodes do
		gui.delete_node(self._nodes[index])
	end
	self._nodes = {}
	self.grid:clear()
end


---@param self window.admin
local function show_page(self, page_id)
	page_id = page_id or self._last_page
	self._last_page = page_id

	gui.set_enabled(self.button_back.node, page_id ~= PAGES.MAIN)

	clear_content(self)
	self.text_header:set_to(page_id)

	if PAGES_FUNC[page_id] then
		PAGES_FUNC[page_id](self)
		eva.storage.set("admin_last_page", page_id)
	end
end


---@param self window.admin
local function add_cheat_button(self, text, action, button_image)
	button_image = button_image or COLORS.BLUE

	local nodes = gui.clone_tree(self.prefab)
	local root = nodes["prefab_cheat_button"]

	local text_component = self.druid:new_text(nodes["text"], text)
	local button = self.druid:new_button(root, function()
		local result, button_image_color = action()
		if type(result) == "string" then
			text_component:set_to(result)
		end
		if type(result) == "boolean" and result then
			close_window(self)
		end
		if button_image_color then
			gui.play_flipbook(nodes["button"], button_image_color)
		end
	end)

	if button_image ~= COLORS.EMPTY then
		gui.set_enabled(root, true)
		gui.play_flipbook(nodes["button"], button_image)
	else
		gui.set_enabled(root, false)
	end

	self.grid:add(root)

	table.insert(self._components, button)
	table.insert(self._components, text_component)
	table.insert(self._nodes, root)
end


---@param debug_key string
---@param text string
---@return fun():string, string, string @Test function, initial button text, initial button color
local function get_toggle_cheat_function(debug_key, text)
	return function()
		local is_enable = not eva.debug.get_value(debug_key)
		eva.debug.set_value(debug_key, is_enable)
		return text .. (is_enable and ": True" or ": False"), is_enable and COLORS.GREEN or COLORS.YELLOW
	end, text .. (eva.debug.get_value(debug_key) and ": True" or ": False"), eva.debug.get_value(debug_key) and COLORS.GREEN or COLORS.YELLOW
end


---@param debug_key string
---@param text string
---@return fun():string, string, string @Test function, initial button text, initial button color
local function get_toggle_function(get_state_function, set_state_function, text)
	return function()
		local is_enabled = get_state_function()
		set_state_function(not is_enabled)
		return text .. (get_state_function() and ": True" or ": False"), get_state_function() and COLORS.GREEN or COLORS.YELLOW
	end, text .. (get_state_function() and ": True" or ": False"), get_state_function() and COLORS.GREEN or COLORS.YELLOW
end


---@param self window.admin
---@param slot_id number
local function add_save_cheat_buttons(self, slot_id)
	local filename = string.format("game_debug_%s.json", slot_id)
	local is_exists = eva.storage.get("debug_save_" .. filename)
	add_cheat_button(self, "Save " .. slot_id, function()
		local quest_name = app.quests and app.quests:get_current_quest_id() or "unknown"
		eva.storage.set("debug_save_" .. filename, quest_name)

		eva.debug.save_profile(filename)

		show_page(self)
	end, COLORS.BLUE)

	local load_text_name = is_exists and "Load " .. is_exists or "Load " .. slot_id
	add_cheat_button(self, load_text_name, function() eva.debug.load_profile(filename) end, is_exists and COLORS.GREEN or COLORS.EMPTY)
end


---@param self window.admin
PAGES_FUNC[PAGES.MAIN] = function(self)
	add_cheat_button(self, "Items", function() show_page(self, PAGES.ITEMS) end, COLORS.BLUE)
	add_cheat_button(self, "Debug", function() show_page(self, PAGES.DEBUG) end, COLORS.BLUE)
	add_cheat_button(self, "Notifications", function() show_page(self, PAGES.NOTIFICATIONS) end, COLORS.BLUE)
	add_cheat_button(self, "Special Actions", function() show_page(self, PAGES.SPECIAL_ACTIONS) end, COLORS.BLUE)
	add_cheat_button(self, "Save", function() show_page(self, PAGES.SAVE) end, COLORS.BLUE)
	add_cheat_button(self, "Windows", function() show_page(self, PAGES.WINDOWS) end, COLORS.BLUE)
	add_cheat_button(self, "Eva", function() show_page(self, PAGES.EVA) end, COLORS.BLUE)
end

---@param self window.admin
PAGES_FUNC[PAGES.ITEMS] = function(self)
end

---@param self window.admin
PAGES_FUNC[PAGES.DEBUG] = function(self)
	add_cheat_button(self, "Reset game", function()
		eva.saver.delete()
		eva.game.reboot()
	end)
	local tutorial_func, tutorial_text, tutorial_color = get_toggle_function(
		function() return app.profile.tutorial:is_enabled() end,
		function(is_enabled) app.profile.tutorial:set_enabled(is_enabled) end,
		"Tutorial")
	add_cheat_button(self, tutorial_text, tutorial_func, tutorial_color)
end

---@param self window.admin
PAGES_FUNC[PAGES.NOTIFICATIONS] = function(self)
end

---@param self window.admin
PAGES_FUNC[PAGES.SPECIAL_ACTIONS] = function(self)
end

---@param self window.admin
PAGES_FUNC[PAGES.SAVE] = function(self)
	add_save_cheat_buttons(self, "slot_1")
	add_cheat_button(self, "empty", function() end, COLORS.EMPTY)
	add_save_cheat_buttons(self, "slot_2")
	add_cheat_button(self, "empty", function() end, COLORS.EMPTY)
	add_save_cheat_buttons(self, "slot_3")
	add_cheat_button(self, "empty", function() end, COLORS.EMPTY)
	add_save_cheat_buttons(self, "slot_4")
	add_cheat_button(self, "empty", function() end, COLORS.EMPTY)
	add_save_cheat_buttons(self, "slot_5")
	add_cheat_button(self, "empty", function() end, COLORS.EMPTY)
	add_save_cheat_buttons(self, "slot_6")
	add_cheat_button(self, "empty", function() end, COLORS.EMPTY)
	add_save_cheat_buttons(self, "slot_7")
	add_cheat_button(self, "empty", function() end, COLORS.EMPTY)
	add_save_cheat_buttons(self, "slot_8")
	add_cheat_button(self, "empty", function() end, COLORS.EMPTY)
	add_save_cheat_buttons(self, "slot_9")
	add_cheat_button(self, "empty", function() end, COLORS.EMPTY)
	add_save_cheat_buttons(self, "slot_10")
	add_cheat_button(self, "empty", function() end, COLORS.EMPTY)
end

---@param self window.admin
PAGES_FUNC[PAGES.WINDOWS] = function(self)
	add_cheat_button(self, "Info", function()
		eva.window.show(const.WINDOW.WINDOW_INFO)
	end)
	add_cheat_button(self, "Confirm", function()
		eva.window.show(const.WINDOW.WINDOW_CONFIRM)
	end)
end


---@param self window.admin
PAGES_FUNC[PAGES.EVA] = function(self)
	add_cheat_button(self, "Push 10 sec", function()
		eva.push.schedule(10, "Title", "Text")
	end)
	add_cheat_button(self, "Vibro: Light", function()
		eva.vibrate.vibrate(eva_const.VIBRATE.LIGHT)
	end)
	add_cheat_button(self, "Vibro: Medium", function()
		eva.vibrate.vibrate(eva_const.VIBRATE.MEDIUM)
	end)
	add_cheat_button(self, "Vibro: Heavy", function()
		eva.vibrate.vibrate(eva_const.VIBRATE.HEAVY)
	end)
	add_cheat_button(self, "Open store", function()
		eva.game.open_store_page()
	end)
	add_cheat_button(self, "Rate game", function()
		eva.rate.open_rate()
	end)
	add_cheat_button(self, "Share", function()
		eva.share.screen("Debug share text")
	end)
end


---@param self window.admin
function init(self)
	self.druid = druid.new(self)
	self.root = gui.get_node("root")
	self.data = eva.window.get_data(WINDOW_ID)

	self.druid:new_button("window_shadow/root", close_window)
	self.druid:new_back_handler(close_window)
	self.druid:new_blocker("base_window/background")
	self.text_header = self.druid:new_text("base_window/text_header", "Admin")

	self._components = {}
	self._nodes = {}

	self.prefab = gui.get_node("prefab_cheat_button")
	gui.set_enabled(self.prefab, false)
	self.grid = self.druid:new_static_grid("grid", self.prefab, BUTTONS_PER_LINE)
	self.button_back = self.druid:new_button("button_main", show_page, PAGES.MAIN)
	self.button_back:set_key_trigger(druid_const.ACTION_BACKSPACE)

	self.druid:new_layout("node_upscale_limit"):set_max_gui_upscale(const.MAX_GUI_UPSCALE)

	local last_page = eva.storage.get("admin_last_page", PAGES.MAIN)
	if not PAGES_FUNC[last_page] then
		last_page = PAGES.MAIN
	end
	show_page(self, last_page)

	eva.window.appear(WINDOW_ID)
end


---@param self window.admin
function final(self)
	self.druid:final()
end


---@param self window.admin
function update(self, dt)
	self.druid:update(dt)
end


---@param self window.admin
function on_message(self, message_id, message, sender)
	eva.window.on_message(WINDOW_ID, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end


---@param self window.admin
function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end
