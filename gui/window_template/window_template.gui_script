local eva = require("eva.eva")
local druid = require("druid.druid")

local const = require("game.const")

local WINDOW_ID = const.WINDOW.WINDOW_SETTINGS

---@class window.template

---@param self window.template
---@param callback function
local function close_window(self, callback)
	local callbacks = self.data.callbacks

	eva.window.disappear(WINDOW_ID, function()
		if callbacks and callbacks.on_close then
			callbacks.on_close()
		end
		if callback then
			callback()
		end
	end)
end


---@param self window.template
function init(self)
	self.druid = druid.new(self)
	self.root = gui.get_node("root")
	self.data = eva.window.get_data(WINDOW_ID)

	self.druid:new_button("window_shadow/root", close_window)
	self.druid:new_back_handler(close_window)
	self.druid:new_blocker("window_background")
	self.druid:new_button("button_close/button", close_window)
	self.druid:new_lang_text("base_window/text_header", "ui_header_id")

	self.druid:new_layout("node_upscale_limit"):set_max_gui_upscale(const.MAX_GUI_UPSCALE)

	eva.window.appear(WINDOW_ID)
end


---@param self window.template
function final(self)
	self.druid:final()
end


---@param self window.template
function update(self, dt)
	self.druid:update(dt)
end


---@param self window.template
function on_message(self, message_id, message, sender)
	eva.window.on_message(WINDOW_ID, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end


---@param self window.template
function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end
